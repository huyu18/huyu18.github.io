<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-Next搭建个人博客（代码块复制功能）</title>
    <url>/2020/03/31/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%EF%BC%89/</url>
    <content><![CDATA[<p>为了提高博客代码块的用户体验，仅仅代码高亮还不行，最好还能一键复制代码。故此文将讲述Hexo NexT主题博客的代码块复制功能配置。</p>
<h2 id="下载-clipboard-js"><a href="#下载-clipboard-js" class="headerlink" title="下载 clipboard.js"></a>下载 clipboard.js</h2><p>三方插件 clipboardjs ，相关介绍和兼容性我就不赘述了，去它<a href="https://clipboardjs.com/" target="_blank" rel="noopener">主页</a>或<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">github</a>上看。</p>
<p><strong>下载地址：</strong></p>
<ul>
<li><a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.js" target="_blank" rel="noopener">clipboard.js</a></li>
<li><a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js" target="_blank" rel="noopener">clipboard.min.js</a> <strong>推荐</strong></li>
</ul>
<p>保存文件<code>clipboard.js / clipboard.min.js</code> ，目录如下：<br><code>.\themes\next\source\js\src</code></p>
<h2 id="clipboardjs-使用"><a href="#clipboardjs-使用" class="headerlink" title="clipboardjs 使用"></a>clipboardjs 使用</h2><p>也是在<code>.\themes\next\source\js\src</code>目录下，创建<code>clipboard-use.js</code>，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &#x2F;*页面载入完成后，创建复制按钮*&#x2F;</span><br><span class="line">  !function (e, t, a) &#123; </span><br><span class="line">    &#x2F;* code *&#x2F;</span><br><span class="line">    var initCopyCode &#x3D; function()&#123;</span><br><span class="line">      var copyHtml &#x3D; &#39;&#39;;</span><br><span class="line">      copyHtml +&#x3D; &#39;&lt;button class&#x3D;&quot;btn-copy&quot; data-clipboard-snippet&#x3D;&quot;&quot;&gt;&#39;;</span><br><span class="line">      &#x2F;&#x2F;fa fa-globe可以去字体库替换自己想要的图标</span><br><span class="line">copyHtml +&#x3D; &#39;  &lt;i class&#x3D;&quot;fa fa-clipboard&quot;&gt;&lt;&#x2F;i&gt;&lt;span&gt;copy&lt;&#x2F;span&gt;&#39;;</span><br><span class="line">      copyHtml +&#x3D; &#39;&lt;&#x2F;button&gt;&#39;;</span><br><span class="line">      $(&quot;.highlight .code pre&quot;).before(copyHtml);</span><br><span class="line">      new ClipboardJS(&#39;.btn-copy&#39;, &#123;</span><br><span class="line">          target: function(trigger) &#123;</span><br><span class="line">              return trigger.nextElementSibling;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    initCopyCode();</span><br><span class="line">  &#125;(window, document);</span><br></pre></td></tr></table></figure>

<p>在<code>.\themes\next\source\css\_custom\custom.styl</code>样式文件中添加下面代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;代码块复制按钮</span><br><span class="line">.highlight&#123;</span><br><span class="line">  &#x2F;&#x2F;方便copy代码按钮（btn-copy）的定位</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-color: #eee;</span><br><span class="line">    background-image: linear-gradient(#fcfcfc,#eee);</span><br><span class="line">    border: 1px solid #d5d5d5;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    color: #333;</span><br><span class="line">    -webkit-transition: opacity .3s ease-in-out;</span><br><span class="line">    -o-transition: opacity .3s ease-in-out;</span><br><span class="line">    transition: opacity .3s ease-in-out;</span><br><span class="line">    padding: 2px 6px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 5px;</span><br><span class="line">    top: 5px;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy span &#123;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight:hover .btn-copy&#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在<code>.\themes\next\layout\_layout.swig</code>文件中，添加引用（注：在 swig 末尾或 body 结束标签（<code>&lt;/body&gt;</code>）之前添加）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 代码块复制功能 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;clipboard.min.js&quot;&gt;&lt;&#x2F;script&gt;  </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;clipboard-use.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<p>效果的可以去<a href="https://huyu18.github.io/">我博客</a>看</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>vue开发移动商城day2</title>
    <url>/2020/03/31/vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8Eday2/</url>
    <content><![CDATA[<h3 id="一、滑动吸顶效果"><a href="#一、滑动吸顶效果" class="headerlink" title="一、滑动吸顶效果"></a>一、滑动吸顶效果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position: sticky;</span><br><span class="line">top: 44px;</span><br><span class="line">&#x2F;&#x2F; 滑动距离顶部44px时，position会自动转化为fixed属性，我们在做移动端商城项目时，比如有滑动到一定具体顶部标签停止不动，这个属性将很好实现。注意：目前有些低版本的浏览器可能不兼容，需谨慎使用。</span><br></pre></td></tr></table></figure>

<h3 id="二、数据保存模型"><a href="#二、数据保存模型" class="headerlink" title="二、数据保存模型"></a>二、数据保存模型</h3><p>我们需要做一个数据展示，在 ‘流行，新款，精选’ 三个模块里面数据会从后台一起取过来，同时在本页上拉加载更多，那数据如何储存才能实现更好的用户体验。</p>
<p><img src="/2020/03/31/vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8Eday2/1581493387629.png" alt="alt"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goods: &#123;</span><br><span class="line">   pop: &#123;page:1, list: []&#125;,</span><br><span class="line">   new: &#123;page:1, list: []&#125;,</span><br><span class="line">   sell: &#123;page:1, list: []&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先将我们从后台请求到的数据，存在一个 goods 对象中，这个对象里面分别又有 pop， new， sell 这三个对象用来区分‘流行，新款，精选’ 三个模块的数据；这三个对象对应的key，value分别展示数据的页数和总共list的数据。用户向上滑动加载时，page和list会跟随变化展示。</p>
<p>第一步页面初始加载时，同时请求pop，new，sell类型的第一页数据展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import HomeSwiper from &quot;.&#x2F;childComps&#x2F;HomeSwiper&quot;</span><br><span class="line">import RecommendView from &quot;.&#x2F;childComps&#x2F;RecommendView&quot;</span><br><span class="line">import FeatureView from &quot;.&#x2F;childComps&#x2F;FeatureView&quot;</span><br><span class="line"></span><br><span class="line">import NavBar from &quot;components&#x2F;common&#x2F;navbar&#x2F;NavBar&quot;</span><br><span class="line">import TabControl from &quot;components&#x2F;content&#x2F;tabControl&#x2F;TabControl&quot;</span><br><span class="line"></span><br><span class="line">import &#123; getHomeMultidata, getHomeGoods &#125; from &quot;network&#x2F;home&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HomeSwiper,</span><br><span class="line">    RecommendView,</span><br><span class="line">    FeatureView,</span><br><span class="line">    NavBar,</span><br><span class="line">    TabControl</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      banner: [],</span><br><span class="line">      recommends: [],</span><br><span class="line">      goods: &#123;</span><br><span class="line">        &#39;pop&#39;: &#123;page: 0, list: []&#125;,</span><br><span class="line">        &#39;new&#39;: &#123;page: 0, list: []&#125;,</span><br><span class="line">        &#39;sell&#39;: &#123;page: 0, list: []&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    &#x2F;&#x2F; 1. 请求多个数据</span><br><span class="line">    getHomeMultidata().then(res &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F;console.log(res)</span><br><span class="line">      this.banner &#x3D; res.data.data.banner.list;</span><br><span class="line">      this.recommends &#x3D; res.data.data.recommend.list;</span><br><span class="line">    &#125;),</span><br><span class="line">    &#x2F;&#x2F; 2.请求商品数据</span><br><span class="line">    this.getHomeGoods(&#39;pop&#39;)</span><br><span class="line">    this.getHomeGoods(&#39;new&#39;)</span><br><span class="line">    this.getHomeGoods(&#39;sell&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getHomeGoods(type) &#123;</span><br><span class="line">      const page &#x3D; this.goods[type].page + 1</span><br><span class="line">      &#x2F;&#x2F; 请求的数据封装在一个方法里，可以根据type类型复用这个方法，这样实现了初次加载时请求pop，new和		sell三个对象中第一页的数据；</span><br><span class="line">      getHomeGoods(type, page).then(res &#x3D;&gt; &#123;</span><br><span class="line">      	&#x2F;&#x2F; es6的变量解构，将res.data.list数据请求到后，一个一个push到this.goods[type].list中</span><br><span class="line">        this.goods[type].list.push(...res.data.list)</span><br><span class="line">        &#x2F;&#x2F; 请求完数据后，对page值进行保存</span><br><span class="line">        this.goods[type].page +&#x3D; 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>第二步，将大的数据展示页封装为一个大的组件GoodsList，有多少个list，将在组件中遍历多少个item展示出来；因为item也是可以复用的，也可以将其封装为一个GoodsListItem小组件在GoodsList组件中遍历展示。</p>
<p>第三步，点击不同类型，传入点击类型后，请求不同类型的数据</p>
<p>TabControl组件中将点击的index传给首页(this.$emit(‘tabClick’, index)), 在首页监听点击事件，根据index的值传入pop，new，sell三个字符串类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tabClick(index) &#123;</span><br><span class="line">  switch(index) &#123;</span><br><span class="line">    case 0:</span><br><span class="line">      this.currentType &#x3D; &#39;pop&#39;</span><br><span class="line">      break</span><br><span class="line">    case 1:</span><br><span class="line">      this.currentType &#x3D; &#39;new&#39;</span><br><span class="line">      break</span><br><span class="line">    case 2:</span><br><span class="line">      this.currentType &#x3D; &#39;sell&#39;</span><br><span class="line">      break</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、Better-Scroll的使用"><a href="#三、Better-Scroll的使用" class="headerlink" title="三、Better-Scroll的使用"></a>三、Better-Scroll的使用</h3><p>我们在做移动端项目，原生的滚动会在手机端有卡顿，不够顺滑，对用户体验效果不好。所以，早期我们会使用icsroll的滚动框架，现在这个框架已经不再更新了，所以我们选择Better-Scroll这个框架<a href="https://better-scroll.github.io/docs/zh-CN/" target="_blank" rel="noopener">官网</a>。</p>
<p><img src="/2020/03/31/vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8Eday2/C:%5CUsers%5C79278%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581574108201.png" alt="1581574108201"></p>
<h4 id="1、基础用法"><a href="#1、基础用法" class="headerlink" title="1、基础用法"></a>1、基础用法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">    &lt;li&gt;...&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;...&lt;&#x2F;li&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;!-- 这里可以放一些其它的 DOM，但不会影响滚动 --&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码中 BetterScroll 是作用在外层 wrapper 容器上的，滚动的部分是 content 元素。这里要注意的是，BetterScroll 只处理容器（wrapper）的第一个子元素（content）的滚动，其它的元素都会被忽略。</p>
<h4 id="2、实时监听滚动的位置"><a href="#2、实时监听滚动的位置" class="headerlink" title="2、实时监听滚动的位置"></a>2、实时监听滚动的位置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  	&lt;li&gt;数据列表&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;.&#x2F;bscroll.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F; 默认情况下BScroll是不可以实时监听滚动位置的</span><br><span class="line">  &#x2F;&#x2F; probe 侦测</span><br><span class="line">  &#x2F;&#x2F; 0,1 都是不侦测实时位置</span><br><span class="line">  &#x2F;&#x2F; 2 在手指滚动的过程中侦测，但手指离开后滚动的惯性位置不侦测</span><br><span class="line">  &#x2F;&#x2F; 3 只要滚动就侦测</span><br><span class="line">  const bscroll &#x3D; new BScroll(document.querySelector(&#39;.content&#39;),&#123;</span><br><span class="line">    probeType: 3,   &#x2F;&#x2F; 根据需求选择值</span><br><span class="line">    pullUpLoad: true</span><br><span class="line">  &#125;)</span><br><span class="line">  bscroll.on(&#39;scroll&#39;,(position) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(position)</span><br><span class="line">  &#125;)</span><br><span class="line">  bscroll.on(&#39;pullingUp&#39;,() &#x3D;&gt; &#123;</span><br><span class="line">  	console.log(&#39;上拉加载更多&#39;)</span><br><span class="line">  	&#x2F;&#x2F; 在这里执行网络请求，请求更多页的数据</span><br><span class="line">  	</span><br><span class="line">  	&#x2F;&#x2F; 等数据请求完，并且将新的数据展示出来后</span><br><span class="line">  	</span><br><span class="line">  	setTimeOut(() &#x3D;&gt; &#123;</span><br><span class="line">  	  bscroll.finsihPullUp()  &#x2F;&#x2F; 1s 后再执行上拉加载更多函数 </span><br><span class="line">  	&#125;,1000)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3、BScroll的封装"><a href="#3、BScroll的封装" class="headerlink" title="3、BScroll的封装"></a>3、BScroll的封装</h4><p>我们在使用第三方插件的时候，为了防止第三方插件不再更新，后续更改其他插件项目重构会很麻烦，我们一般在项目中会对插件进行一个封装后再使用。</p>
<p>// ref如果是绑定在组件中的，那么通过<strong>this.refs.refname</strong>绑定的是一个组件对象</p>
<p>// ref如果是绑定在普通的元素中，那么通过this.refs.refname绑定的是一个元素对象</p>
<p>// 我们在获取元素为了避免class类名重复，通过ref属性获取会更好</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;wrapper&quot; ref&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BScroll from &quot;better-scroll&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Scroll&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      scroll: null</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.scroll &#x3D; new BScroll(this.$refs.wrapper, &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4、滚动区域的bug分析"><a href="#4、滚动区域的bug分析" class="headerlink" title="4、滚动区域的bug分析"></a>4、滚动区域的bug分析</h4><p>● Better-Scroll在决定有多少区域可以滚动时，是根据scrollHeight属性决定</p>
<p>​    ○ scrollHeight属性是根据Better-Scroll的content中的子组件的高度</p>
<p>​    ○ 但是图片还未加载出来计算出的高度是错误的，等加载完成后出现新的高度，scrollHeight的属性未更新</p>
<p>​    ○ 所以监听每张图片是否加载完成，只要有一张图片加载完成了，执行一次refresh()</p>
<p>​    ○ @load=’方法’ ，监听图片加载完成</p>
<p>​    ○ 最后调用scroll.refresh()</p>
<p>● 非父子组件通信</p>
<p>​    ○ 由于涉及非父子组件之间的通信，所以在调用refresh()方法时，选择了<strong>事件总线</strong>。</p>
<p>​    ○ Vue.prototype.$bus = new Vue()</p>
<p>​    ○ this.$bus.$emit(‘事件名称’，参数)</p>
<p>​    ○ this.$bus.$on(‘事件名称’，回调函数(参数))</p>
<p><img src="/2020/03/31/vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8Eday2/1585625123482.png" alt="alt"></p>
<h3 id="四、Back-Top封装"><a href="#四、Back-Top封装" class="headerlink" title="四、Back-Top封装"></a>四、Back-Top封装</h3><p>Back-Top组件与BScroll组件是两个平行组件，现在我们需要监听Back-Top的点击事件，然后获取BScroll组件中滚动事件的方法。</p>
<p>那么组件的点击事件如何使用？.native修饰符</p>
<ul>
<li>我们在需要监听一个组件的原生点击事件时，必须给对应的事件加上.native修饰符，才能进行监听。</li>
</ul>
<p>通过对Back-Top组件监听<strong>@click.native</strong>点击事件，然后在Home首页里面通过ref属性获取BScroll组件里面的方法<strong>this.$refs.srcoll.scrollTo()</strong>即可。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo引用本地图片无法显示</title>
    <url>/2020/02/11/Hexo%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h4 id="一、插件安装与配置"><a href="#一、插件安装与配置" class="headerlink" title="一、插件安装与配置"></a>一、插件安装与配置</h4><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是<strong>hexo-asset-image</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>但是这个插件的内容需要修改【不然可能会出Bug】</p>
<p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">  var config &#x3D; hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    	var link &#x3D; data.permalink;</span><br><span class="line">	if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">	   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">	else</span><br><span class="line">	   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">	&#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">	var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key &#x3D; toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">		if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">			&#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">			var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">			if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">			   !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">			  &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">			  &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">			  var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">				return elem !&#x3D; &#39;&#39;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">				return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  if(srcArray.length &gt; 1)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">			  $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">			  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">			console.info&amp;&amp;console.info($(this));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] &#x3D; $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>打开_config.yml文件，修改下述内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<h4 id="二、在文章中插入图片"><a href="#二、在文章中插入图片" class="headerlink" title="二、在文章中插入图片"></a>二、在文章中插入图片</h4><p>安装完成后，再运行hexo n “title”来生成md博文时，/source/_posts文件夹内除了title.md文件还有一个同名的文件夹；</p>
<p>在title.md中引入图片时，先把图片复制到title这个文件夹中，然后只需要在title.md中按照markdown的格式引入图片：</p>
<p><img src="/2020/02/11/Hexo%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/%E5%9B%BE%E7%89%87%E5%90%8D.jpg" alt="你想输入的替代文字"></p>
<p>注意： title是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入title这个文件夹内就好了，很像引用相对路径。</p>
<p>检查一下，<code>hexo clean</code>清除缓存文件，<code>hexo g</code>生成页面后，<code>hexo s</code>命令本机启动，进入<code>http://localhost:4000</code>查看是否正确</p>
<p>最后 hexo g -d 同步到github</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>vue开发移动商城day1</title>
    <url>/2020/02/11/vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8Eday1/</url>
    <content><![CDATA[<h3 id="一、vue脚手架创建项目"><a href="#一、vue脚手架创建项目" class="headerlink" title="一、vue脚手架创建项目"></a>一、vue脚手架创建项目</h3><p>Vue CLI 4.0.4</p>
<p>vue create 项目名称 (最好不要写中文)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Please pick a preset: (Use arrow keys):  &#x2F;&#x2F;选择一个配置</span><br><span class="line">default (babel, eslint)  &#x2F;&#x2F;默认配置</span><br><span class="line">manually select features &#x2F;&#x2F;手动选择</span><br></pre></td></tr></table></figure>

<p>根据自己需求选择所需要的插件，一般我会选择最简单的配置，后续需要再安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> ( ) Router</span><br><span class="line"> ( ) Vuex</span><br><span class="line"> ( ) CSS Pre-processors</span><br><span class="line"> ( ) Linter &#x2F; Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure>

<p>方向键上下选择，按空格选择和取消，选择完成之后敲回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files    &#x2F;&#x2F;独立的配置文件</span><br><span class="line">  In package.json</span><br></pre></td></tr></table></figure>

<p>我一般会选择单独的配置文件，这样在修改配置文件时，我可以直接去找我建立的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset for future projects? (y&#x2F;N)  &#x2F;&#x2F;是否将刚刚的选择保存为一个新的项目，保存之后再重新新建项目会有你刚刚新保存的项目名称，下次可以直接选择你已经选择好的项目名称，作为你默认的配置</span><br></pre></td></tr></table></figure>

<p>如果保存之后你不想使用了，或者保存了多个，如何进行删除所保存的项目呢？</p>
<p>Window举例：C盘 -&gt; user -&gt; Administrator (这里可能是你自己的电脑名称,例如邮箱登录的账号) -&gt; .vuerc </p>
<p>打开.vuerc 文件可以看到就是我们自己所保存的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;useTaobaoRegistry&quot;: true,</span><br><span class="line">  &quot;packageManager&quot;: &quot;yarn&quot;,</span><br><span class="line">  &quot;latestVersion&quot;: &quot;4.2.2&quot;,</span><br><span class="line">  &quot;lastChecked&quot;: 1581302835397,</span><br><span class="line">  &quot;presets&quot;: &#123;</span><br><span class="line">    &quot;huyuvuecli4&quot;: &#123;</span><br><span class="line">      &quot;useConfigFiles&quot;: true,</span><br><span class="line">      &quot;plugins&quot;: &#123;</span><br><span class="line">        &quot;@vue&#x2F;cli-plugin-babel&quot;: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接删除 “presets” 对象里面的数据即可，如果是保存的多个配置，对象就会有多个，选择你要删除的名称就可以了。</p>
<p>大部分我们生成的全局配置路径都是在这里，比如git、npm等的配置我们也是可以在这里找到的</p>
<h3 id="二、GitHub-托管"><a href="#二、GitHub-托管" class="headerlink" title="二、GitHub 托管"></a>二、GitHub 托管</h3><p>登录github账号后，新建仓库</p>
<p><img src="/2020/02/11/vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8Eday1/1581304728109.png" alt="alt"></p>
<p>项目名称和项目描述</p>
<p><img src="/2020/02/11/vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8Eday1/1581305069673.png" alt="alt"></p>
<p>创建成功之后，需要将远程地址与我们的项目连接起来</p>
<p>第一种，可以复制刚刚新建的项目地址，git clone 远程仓库地址，将你的项目文件复制粘贴到刚刚克隆的文件夹内，注意.git的文件夹不用复制，依赖包也不需要复制；</p>
<p>进入到文件夹，git add .  -&gt;  git commit -m ‘初始化项目’ -&gt; git push</p>
<p>第二种，直接将我们的项目文件夹和远程仓库进行连接</p>
<p>git remote add origin 远程仓库地址</p>
<p>git push -u origin master</p>
<h3 id="三、划分目录结构"><a href="#三、划分目录结构" class="headerlink" title="三、划分目录结构"></a>三、划分目录结构</h3><p>新建项目是一般会在前期将目录结构划分好，方便后续可以开发和查看；</p>
<p>我们所有编辑文件都在src文件夹中</p>
<blockquote>
<p>-src</p>
<blockquote>
<p>– assets  //资源</p>
<blockquote>
<p>— css</p>
<p>— img</p>
</blockquote>
<p>– common  //公共js文件</p>
<p>– components  //组件</p>
<blockquote>
<p>— common  //封装好的公共组件，可以用在其他项目中，直接拿来用的组件</p>
<p>— content  //当前项目中使用的组件</p>
</blockquote>
<p>– network  //网络请求</p>
<p>– router  //路由</p>
<p>– store  //公共状态管理相关的文件夹</p>
<p>– view  //视图</p>
</blockquote>
</blockquote>
<h3 id="四、css文件引入"><a href="#四、css文件引入" class="headerlink" title="四、css文件引入"></a>四、css文件引入</h3><p>normalize.css 对浏览器标签进行统一，可以在github下载引入</p>
<h3 id="五、配置文件夹别名"><a href="#五、配置文件夹别名" class="headerlink" title="五、配置文件夹别名"></a>五、配置文件夹别名</h3><p>根目录新建vue.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123; &#x2F;&#x2F;别名</span><br><span class="line">        &#39;assets&#39;: &#39;@&#x2F;assets&#39;,</span><br><span class="line">        &#39;common&#39;: &#39;@&#x2F;common&#39;,</span><br><span class="line">        &#39;network&#39;: &#39;@&#x2F;network&#39;,</span><br><span class="line">        &#39;components&#39;: &#39;@&#x2F;components&#39;,</span><br><span class="line">        &#39;views&#39;: &#39;@&#x2F;views&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外vue-cli3之后的版本，作者将.editorconfig文件删除了，我们在新建项目的时候，需要将其加上，可以直接在我们原来项目中复制粘贴过来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br></pre></td></tr></table></figure>

<h3 id="六、vue-router路由的引用和封装"><a href="#六、vue-router路由的引用和封装" class="headerlink" title="六、vue-router路由的引用和封装"></a>六、vue-router路由的引用和封装</h3><p>在初建项目时，是没有安装vue-router插件的，所以首先需要npm install vue-router –save / yarn add vue-router下载插件，然后引入，导出；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">const Home &#x3D; () &#x3D;&gt; import(&#39;views&#x2F;home&#x2F;Home&#39;)</span><br><span class="line">const Cart &#x3D; () &#x3D;&gt; import(&#39;views&#x2F;cart&#x2F;Cart&#39;)</span><br><span class="line">const Category &#x3D; () &#x3D;&gt; import(&#39;views&#x2F;category&#x2F;Category&#39;)</span><br><span class="line">const Profile &#x3D; () &#x3D;&gt; import(&#39;views&#x2F;profile&#x2F;Profile&#39;)</span><br><span class="line"></span><br><span class="line">const routes &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;home&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;home&#39;,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;cart&#39;,</span><br><span class="line">    component: Cart</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;category&#39;,</span><br><span class="line">    component: Category</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;profile&#39;,</span><br><span class="line">    component: Profile</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: &#39;history&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure>

<h3 id="七、小图标修改"><a href="#七、小图标修改" class="headerlink" title="七、小图标修改"></a>七、小图标修改</h3><p>public文件夹，index.html 中修改link 的 href 路径 和 title 名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;icon&quot; href&#x3D;&quot;&lt;%&#x3D; BASE_URL %&gt;logo.png&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 同级目录下添加你需要更改的小图标图片</span><br></pre></td></tr></table></figure>

<h3 id="八、封装一个独立的导航组件"><a href="#八、封装一个独立的导航组件" class="headerlink" title="八、封装一个独立的导航组件"></a>八、封装一个独立的导航组件</h3><p>移动端导航大多是类似的，我们可以根据特性封装一个公共组件去使用，比如如下导航分为左中右，我们可以划分为三个具名插槽</p>
<p><img src="/2020/02/11/vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8Eday1/1581316901988.png" alt="alt"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;nav-bar&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;left&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;center&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;center&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;right&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;NavBar&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .nav-bar&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 44px;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    box-shadow: 0 1px 1px rgba(100,100,100,.1)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left,.right&#123;</span><br><span class="line">    width: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .center&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>然后在单独模块进行引用和充填数据</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
